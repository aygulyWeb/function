1) Напиши функцию создания генератора sequence(start, step). Она при вызове возвращает другую функцию-генератор, 
которая при каждом вызове дает число на 1 больше, и так до бесконечности.
 Начальное число, с которого начинать отсчет, и шаг, задается при создании генератора. 
Шаг можно не указывать, тогда он будет равен одному. Начальное значение по умолчанию равно 0. 

Генераторов можно создать сколько угодно.

var generator = sequence(10, 3);
var generator2 = sequence(7, 1);

console.log(generator()); // 10
console.log(generator()); // 13

console.log(generator2()); // 7

console.log(generator()); // 16

console.log(generator2()); // 8


2) Напиши функцию partial(fn, a1, a2, ....), которая позволяет зафиксировать один или несколько аргументов функции. 
Пример:
function add(a, b) { return a + b; }
function mult(a, b, c, d) { return a * b * c *8; }

var add5 = partial(add, 5); // Мы получили функцию с 1 аргументом, которая прибавляет к любому числу 5

console.log(add5(2)); // 7
console.log(add5(10)); // 15
console.log(add5(8)); // 13

var mult23 = partial(mult, 2, 3); // мы зафиксировали первые 2 аргумента mult() как 2 и 3

console.log(mult23(4, 5)); // 2*3*4*5 = 120
console.log(mult23(1, 1)); // 2*3*1*1 = 6

3)  Дано число. Сложите его цифры. Если сумма получилась более 9-ти, опять сложите его цифры. 
И так, пока сумма не станет однозначным числом (9 и менее).

4)  Функция ggg принимает 2 параметра: анонимную функцию, которая возвращает 3 и анонимную функцию,
 которая возвращает 4. Верните результатом функции ggg сумму 3 и 4.

5) Дана функция ggg. Она требует первым параметром число, вторым функцию, 
которая возводит в квадрат, а третьим параметром функцию, которая возводит в куб. 
Эти функции есть как Function Declaration - kvadrat,
 kub. Пусть функция ggg вернет сумму квадрата и куба числа
 
